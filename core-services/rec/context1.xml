<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    					http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
              			http://www.springframework.org/schema/context
              			http://www.springframework.org/schema/context/spring-context-3.1.xsd
    					http://www.springframework.org/schema/util
    					http://www.springframework.org/schema/util/spring-util-3.1.xsd">


	<import resource="core-services-context.xml"/>
	<import resource="handy-jmx-beans.xml"/>
	<import resource="file-client-context.xml"/>



	<bean id="SearchForJvmsJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass">
			<value>com.jpmc.dart.coreservices.heartbeat.SearchForJvmsJob</value>
		</property>
		<property name="jobDataAsMap">
			<map>
				<entry key="findAliveJvms" value-ref="FindAliveJvmsLocal" />
		        <entry key="findAliveJvmsFromOtherHosts" value-ref="FindAliveJvmsFromOtherHosts" />
			</map>
		</property>
	</bean>

	<bean id="coreServicesHeartbeatTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean" lazy-init="true">
        <property name="jobDetail" ref="SearchForJvmsJob" />
		<property name="cronExpression">
			<value>6 */2 * * * ?</value>
		</property>
	</bean>

	<!-- all framework specific beans go here... -->
	<!-- Don't want to do this anymore...
	<bean id="scanForArchiveWorkTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean" lazy-init="true">
        <property name="jobDetail" ref="scanForArchiveWorkJob" />
		<property name="cronExpression">
			<value>${archive.cron}</value>
		</property>
	</bean>

	<bean id="scanForArchiveWorkJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass">
			<value>com.jpmc.dart.coreservices.archiver.ArchiveJob</value>
		</property>
		<property name="jobDataAsMap">
			<map>
				<entry key="archiveKickoffJob" value-ref="ArchiveKickoffJob" />
		        <entry key="targetQueue" value="${archive.work.queue}" />
		        <entry key="baseDir" value="${fs.local.root}" />
		        <entry key="lock" value-ref="lockManager" />
			</map>
		</property>
	</bean>
 	-->

	<bean id="scanForStatsTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean" lazy-init="true">
        <property name="jobDetail" ref="scanForStats" />
		<property name="cronExpression">
			<value>0 */5 * ? * *</value>
		</property>
	</bean>

	<bean id="scanForStats" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass">
			<value>com.jpmc.dart.coreservices.perfcounter.SamplerJob</value>
		</property>
		<property name="jobDataAsMap">
			<map>
				<entry key="statsCollectorProcess" value-ref="StatsCollectorProcess" />
			</map>
		</property>
	</bean>



	<bean id="scanForCleanupWorkTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean" lazy-init="true">
        <property name="jobDetail" ref="scanForCleanupWorkJob" />
		<property name="cronExpression">
			<value>${cleanup.cron}</value>
		</property>
	</bean>

	<bean id="scanForCleanupWorkJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass">
			<value>com.jpmc.dart.coreservices.directorycleaner.TriggerFileCleanerJob</value>
		</property>
		<property name="jobDataAsMap">
			<map>
				<entry key="lockManager" value-ref="lockManager" />
				<entry key="fileCleanerJob" value-ref="FileCleanerKickoffJob" />
				<entry key="name" value="${fs.local.root}" />
			</map>
		</property>
	</bean>


	<bean id="ArchiveMessageProcessorProvider" class="com.jpmc.cto.framework.jms.JmsListenerContainer">
		<property name="containerName" value="ArchiveMessageProcessor" />
		<property name="processor" ref="ArchiveMessageProcessor"/>
		<property name="destinationName" value="${archive.work.queue}"/>
		<property name="concurrentConsumers" value="${core.archive.maxconcurrentlistener}"/>
		<property name="connectionFactory" ref="fwkJmsFactory"/>
		<property name="acceptMessagesWhileStopping" value="true"/>
	</bean>

	<bean id="CleanDatedDirectoryMessageProcessorProvider" class="com.jpmc.cto.framework.jms.JmsListenerContainer">
		<property name="containerName" value="CleanDatedDirectoryMessageProcessor" />
		<property name="processor" ref="CleanDatedDirectoryMessageProcessor"/>
		<property name="destinationName" value="${clean.dated.directory.work.queue}"/>
		<property name="concurrentConsumers" value="${clean.dated.directory.maxconcurrentlistener}"/>
		<property name="connectionFactory" ref="fwkJmsFactory"/>
		<property name="acceptMessagesWhileStopping" value="true"/>
	</bean>


	<bean id="CleanDirectoryMessageProcessorProvider" class="com.jpmc.cto.framework.jms.JmsListenerContainer">
		<property name="containerName" value="CleanDirectoryMessageProcessorProvider" />
		<property name="processor" ref="CleanDirectoryMessageProcessor"/>
		<property name="destinationName" value="${clean.directory.work.queue}"/>
		<property name="concurrentConsumers" value="${clean.directory.maxconcurrentlistener}"/>
		<property name="connectionFactory" ref="fwkJmsFactory"/>
		<property name="acceptMessagesWhileStopping" value="true"/>
	</bean>

	<bean id="PerformanceCounterSaverProvider" class="com.jpmc.cto.framework.jms.JmsListenerContainer">
		<property name="containerName" value="PerformanceCounterMessageProcessor" />
		<property name="processor" ref="PerformanceEventProcessor"/>
		<property name="destinationName" value="${application.performance.queue}"/>
		<property name="concurrentConsumers" value="${core.perf.maxconcurrentlistener}"/>
		<property name="connectionFactory" ref="fwkJmsFactory"/>
		<property name="acceptMessagesWhileStopping" value="true"/>
	</bean>

	<bean id="PerformanceCounterExtractProvider" class="com.jpmc.cto.framework.jms.JmsListenerContainer">
		<property name="containerName" value="PerformanceCounterExtractProvider" />
		<property name="processor" ref="PerformanceCounterExtract"/>
		<property name="destinationName" value="${proc.date.changed.queue}"/>
		<property name="concurrentConsumers" value="1"/>
		<property name="connectionFactory" ref="fwkJmsFactory"/>
		<property name="acceptMessagesWhileStopping" value="true"/>
	</bean>




</beans>